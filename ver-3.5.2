#adapted for py3.5.2

from keys import decode_keystore_json #keys.py from pyethereum, we only want the decode_keystore_json function
import json
import itertools
import sys
print(sys.version)

# the json account file from keystore, here renamed, normally has a name like 
# Ethereum\keystore\UTC--2016-12-23T11-51-50.069518500Z--637f383c240g512be19d3ffa3b45d7f03babf091
f = open('ethereum-wallet.json')
jsondata=json.load(f)

combinations=[
    ('beautiful', 'ugly', 'elegant', 'clumsy', ''),
    ('blue', 'red', 'yellow', 'green'),
    ('horse', 'dog', 'cat')
]

pwds=[]
def generate_all(el, tr): #taken from pyethrecover
    if el:
        for j in range(len(el[0])):
            for w in generate_all(el[1:], tr + el[0][j]):
                yield w
    else:
        yield tr


pwds = itertools.chain(pwds, generate_all(combinations,''))
pwds_l = list(pwds)
n_pws = len(pwds_l)

print('Number of passwords to test {0} '.format(n_pws))

i=1
found = 0
for l in pwds_l:    
    try:
        decode_keystore_json(jsondata,l)
        print('\n*** found password in text file {0} '.format(l))
        found = 1
        break
    except:   
        i+=1

if found == 0:
    print('Password not found in {0} attempts'.format(n_pws))
